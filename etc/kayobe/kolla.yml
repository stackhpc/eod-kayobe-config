---
# Kayobe Kolla configuration.

###############################################################################
# Kolla installation.

# Type of Kolla control installation. One of 'binary' or 'source'.
#kolla_ctl_install_type:

# Path to directory for kolla source code checkout.
#kolla_source_path:

# URL of Kolla source code repository if type is 'source'.
#kolla_source_url:
kolla_source_url: https://github.com/stackhpc/kolla

# Version (branch, tag, etc.) of Kolla source code repository if type is
# 'source'.
#kolla_source_version:
kolla_source_version: stackhpc/queens

# Path to virtualenv in which to install kolla.
#kolla_venv:

# Path in which to generate kolla configuration.
#kolla_build_config_path:

###############################################################################
# Kolla-ansible installation.

# Type of Kolla-ansible control installation. One of 'binary' or 'source'.
#kolla_ansible_ctl_install_type:

# Path to directory for kolla-ansible source code checkout.
#kolla_ansible_source_path:

# URL of Kolla Ansible source code repository if type is 'source'.
#kolla_ansible_source_url:
kolla_ansible_source_url: https://github.com/stackhpc/kolla-ansible

# Version (branch, tag, etc.) of Kolla Ansible source code repository if type
# is 'source'.
#kolla_ansible_source_version:
kolla_ansible_source_version: stackhpc/queens

# Path to virtualenv in which to install kolla-ansible.
#kolla_ansible_venv:

# Path to Kolla-ansible configuration directory.
#kolla_config_path:

# Path to Kolla-ansible node custom configuration directory.
#kolla_node_custom_config_path:

###############################################################################
# Kolla configuration.

# Kolla base container image distribution.
#kolla_base_distro:

# Kolla installation type: binary or source.
#kolla_install_type:

# URL of docker registry to use for Kolla images.
#kolla_docker_registry:
kolla_docker_registry: "{{ docker_registry }}"

# Docker namespace to use for Kolla images.
#kolla_docker_namespace:
kolla_docker_namespace: eod

# Username to use to access a docker registry.
#kolla_docker_registry_username:

# Password to use to access a docker registry.
#kolla_docker_registry_password:

# Kolla OpenStack release version. This should be a Docker image tag.
#kolla_openstack_release:
kolla_openstack_release: "6.0.0.0"

# Dict mapping names of sources to their definitions for
# kolla_install_type=source. See kolla.common.config for details.
# Example:
# kolla_sources:
#   ironic_base:
#     type: git
#     location: https://github.com/openstack/ironic
#     reference: master
#kolla_sources:

###############################################################################
# Kolla image build configuration.

# Dict mapping Jinja2 block names in kolla's Docker images to their contents.
#kolla_build_blocks:
kolla_build_blocks:
  #fluentd_footer: |
  #  # Install a custom fluentd output plugin that forwards logs to the monasca
  #  # log API.
  #  ADD https://github.com/stackhpc/fluentd-monasca/archive/master.tar.gz /fluentd-monasca.tar.gz
  #  RUN mkdir /fluentd-monasca \
  #      && cd /fluentd-monasca \
  #      && tar -zxf /fluentd-monasca.tar.gz \
  #      && rm /fluentd-monasca.tar.gz
  #  RUN cd /fluentd-monasca/fluentd-monasca-master \
  #      && gem build fluentd-monasca-output.gemspec \
  #      && gem install fluentd-monasca-output-0.0.1.gem \
  #      && fluent-gem install fluentd-monasca-output-0.0.1.gem \
  #      && rm -rf /fluentd-monasca
  #grafana_footer: |
  #  # TODO: Re-enable the official plugin when #450868 is merged upstream. For now we will
  #  # manually install it from git
  #  # RUN grafana-cli plugins install monasca-datasource
  #  RUN mkdir -p /var/lib/grafana/plugins/monasca-datasource \
  #      && curl -Lo tmp.tgz https://github.com/stackhpc/monasca-grafana-datasource/tarball/log-query-api \
  #      && tar zxvf tmp.tgz -C /var/lib/grafana/plugins/monasca-datasource --strip-components=1 \
  #      && rm tmp.tgz
  #  # Install plugin for Gantt charts
  #  RUN grafana-cli plugins install natel-discrete-panel
  #  RUN grafana-cli plugins install vonage-status-panel
  ironic_inspector_footer: |
    # Install our custom inspector plugins.
    RUN pip install stackhpc-inspector-plugins
  kafka_version: |
    # TODO(dszumski) This is the most recent version of Kafka that Monasca
    # currently supports but we need to upgrade Monasca services before we
    # can use it. Until then continue to use the same version as provided
    # by the LXC container.
    # ENV kafka_url=https://archive.apache.org/dist/kafka/0.9.0.1/kafka_2.11-0.9.0.1.tgz
    # ENV kafka_pkg_sha512sum=818a821877436bbb9698a32afeb299bc569985a6b712179a9882bf1a10edfdb4992519ba39c1d7499144650b30781fc943a4d5d15b8d5916a4c1a5e542d9b956
    ENV kafka_url=https://archive.apache.org/dist/kafka/0.8.2.2/kafka_2.10-0.8.2.2.tgz
    ENV kafka_pkg_sha512sum=03978c4e82257eb36cc4c80c82c8e22a18a4546fd857b4fa34b089674960894321efb9c461229944b2b148c32c0cc4ec8a5d4c01ea8aee67ed9bedcf632a6b0d
  neutron_server_footer: |
    # Install a patched generic-switch plugin with support for Mellanox
    # switches.
    RUN pip install git+https://github.com/stackhpc/networking-generic-switch@stackhpc/queens
    # Install a locally modified version of networking-mlnx with support for
    # disabling the SDN controller sync mechanism in the mlnx_sdn_assist
    # driver. This allows us to bind to flat Infiniband networks.
    RUN pip install git+https://github.com/stackhpc/networking-mlnx@stackhpc/queens
  manila_base_footer: |
    # Upgrade Ceph to mimic release
    ARG BASEURL="http://download.ceph.com/rpm-mimic/el7/\$basearch"
    ARG GPGKEY="https://download.ceph.com/keys/release.asc"
    RUN echo $'[ceph_mimic]\n\
    name=Ceph Mimic repo\n\
    baseurl='$BASEURL$'\n\
    gpgkey='$GPGKEY$'\n\
    gpgcheck=1\n\
    enabled=1\n '\
    >> /etc/yum.repos.d/ceph_mimic.repo
    RUN yum install -y python-ceph

# Dict mapping image customization variable names to their values.
# Each variable takes the form:
# <image name>_<customization>_<operation>
# Hyphens in the image name are replaced with underscores. The customization is
# most commonly packages. The operation should be one of override, append or
# remove. The value should be a list.
#kolla_build_customizations:
kolla_build_customizations:
   # Use our own repo server to install the monasca-grafana fork
   #base_yum_repo_files_remove:
   #  - 'grafana.repo'
   influxdb_packages_override:
     - 'influxdb-0.10.3-1'
  # Required for Keystone federation via EGI Check-in, and any other IdPs
  # that support the OpenID Connect protocol
   keystone_base_packages_append:
     - 'mod_auth_openidc'

###############################################################################
# Kolla-ansible inventory configuration.

# Full custom seed inventory contents.
#kolla_seed_inventory_custom:

# Custom overcloud inventory containing a mapping from top level groups to
# hosts.
#kolla_overcloud_inventory_custom_top_level:

# Custom overcloud inventory containing a mapping from components to top level
# groups.
#kolla_overcloud_inventory_custom_components:

# Custom overcloud inventory containing a mapping from services to components.
kolla_overcloud_inventory_custom_services: "{{ lookup('template', kayobe_config_path ~ '/kolla/inventory/overcloud-services.j2') }}"

# Full custom overcloud inventory contents. By default this will be the
# concatenation of the top level, component, and service inventories.
#kolla_overcloud_inventory_custom:

# List of groups mapped to kolla storage group.
#kolla_overcloud_inventory_storage_groups:
# NOTE: We want to manage the storage nodes outside of kolla-ansible.
kolla_overcloud_inventory_storage_groups: []

# Dict mapping from kolla-ansible groups to kayobe groups and variables. Each
# item is a dict with the following items:
# * groups: A list of kayobe ansible groups to map to this kolla-ansible group.
# * vars: A dict mapping variable names to values for hosts in this
#         kolla-ansible group.
#kolla_overcloud_inventory_top_level_group_map:

# List of names of top level kolla-ansible groups. Any of these groups which
# have no hosts mapped to them will be provided with an empty group definition.
#kolla_overcloud_inventory_kolla_top_level_groups:

###############################################################################
# Kolla-ansible configuration.

# Virtualenv directory where Kolla-ansible's ansible modules will execute
# remotely on the target nodes. If None, no virtualenv will be used.
#kolla_ansible_target_venv:

# Whether TLS is enabled for the external API endpoints.
#kolla_enable_tls_external:

# Whether debug logging is enabled.
#kolla_openstack_logging_debug:

###############################################################################
# Kolla feature flag configuration.

#kolla_enable_aodh:
#kolla_enable_barbican:
#kolla_enable_cadf_notifications:
#kolla_enable_ceilometer:
#kolla_enable_central_logging:
kolla_enable_central_logging: True
kolla_enable_ceph: False
#kolla_enable_ceph_rgw:
kolla_enable_cinder: True
#kolla_enable_cinder_backend_hnas_iscsi:
#kolla_enable_cinder_backend_hnas_nfs:
#kolla_enable_cinder_backend_iscsi:
#kolla_enable_cinder_backend_lvm:
#kolla_enable_cinder_backend_nfs:
#kolla_enable_cloudkitty:
#kolla_enable_congress:
#kolla_enable_designate:
#kolla_enable_etcd:
#kolla_enable_freezer:
#kolla_enable_gnocchi:
#kolla_enable_grafana:
kolla_enable_grafana: True
#kolla_enable_haproxy:
#kolla_enable_heat:
#kolla_enable_horizon:
#kolla_enable_influxdb:
#kolla_enable_ironic:
#kolla_enable_iscsid:
#kolla_enable_karbor:
#kolla_enable_kuryr:
#kolla_enable_magnum:
kolla_enable_manila: True
#kolla_enable_manila_backend_generic:
#kolla_enable_manila_backend_hnas:
#kolla_enable_mistral:
#kolla_enable_monasca:
#kolla_enable_mongodb:
#kolla_enable_multipathd:
#kolla_enable_murano:
#kolla_enable_neutron_vpnaas:
#kolla_enable_neutron_dvr:
#kolla_enable_neutron_fwaas:
#kolla_enable_neutron_lbaas:
#kolla_enable_neutron_qos:
#kolla_enable_neutron_agent_ha:
#kolla_enable_neutron_bgp_dragent:
#kolla_enable_neutron_provider_networks:
kolla_enable_neutron_provider_networks: True
#kolla_enable_nova_serialconsole_proxy:
#kolla_enable_octavia:
#kolla_enable_osprofiler:
#kolla_enable_panko:
#kolla_enable_prometheus:
kolla_enable_prometheus: True
#kolla_enable_rally:
#kolla_enable_sahara:
#kolla_enable_searchlight:
#kolla_enable_senlin:
#kolla_enable_skydive:
#kolla_enable_solum:
#kolla_enable_swift:
#kolla_enable_tacker:
#kolla_enable_telegraf:
#kolla_enable_tempest:
#kolla_enable_trove:
#kolla_enable_vmtp:
#kolla_enable_watcher:
#kolla_enable_zun:

###############################################################################
# Passwords and credentials.

# Dictionary containing default custom passwords to add or override in the
# Kolla passwords file.
#kolla_ansible_default_custom_passwords:

# Dictionary containing custom passwords to add or override in the Kolla
# passwords file.
#kolla_ansible_custom_passwords:

###############################################################################
# TLS certificate bundle management

# Optionally copy a TLS certificate bundle into place.
#
# When enabled, this will copy the contents of kolla_tls_cert into place for
# use by HAproxy.
#
# Note that this should be formatted as a literal style block scalar.
#kolla_tls_cert:

###############################################################################
# Dummy variable to allow Ansible to accept this file.
workaround_ansible_issue_8743: yes
